#[allow(dead_code, non_camel_case_types)]
#[derive(Debug, Clone, PartialEq, PartialOrd)]
pub enum Token {
	whitespace,
	cmd_name,
    literal_string,
    inline_token,
	extras,
	word,
	supertype,
	conflicts,
	externals,
	source_file,
	comment,
	program_saty,
	program_satyh,
	headers,
	_header,
	header_require,
	header_import,
	header_stage,
	preamble,
	_statement,
	let_stmt,
	_let_stmt_argument,
	let_rec_stmt,
	let_rec_inner,
	_let_rec_stmt_argument,
	let_rec_matcharm,
	let_inline_stmt,
	let_block_stmt,
	let_math_stmt,
	let_mutable_stmt,
	type_stmt,
	type_inner,
	type_variant,
	open_stmt,
	_arg,
	module_stmt,
	sig_stmt,
	struct_stmt,
	_sig_inner,
	sig_type_stmt,
	sig_val_stmt,
	sig_direct_stmt,
	_type_expr,
	type_fun,
	type_prod,
	type_inline_cmd,
	type_block_cmd,
	type_math_cmd,
	type_list,
	type_record,
	type_record_unit,
	type_application,
	type_param,
	type_name,
	constraint,
	pat_as,
	_pat_cons,
	_pattern,
	pat_variant,
	pat_list,
	pat_tuple,
	_expr,
	match_expr,
	match_arm,
	match_guard,
	bind_stmt,
	ctrl_while,
	ctrl_if,
	lambda,
	assignment,
	binary_expr,
	binary_operator,
	unary_operator_expr,
	unary_operator,
	unary_prefix,
	application,
	_application_args,
	_application_args_opt,
	command_application,
	variant_constructor,
	record_member,
	_unary,
	record,
	_record_inner,
	record_unit,
	list,
	tuple,
	expr_with_mod,
	modvar,
	_mod_cmd_name,
	module_name,
	variant_name,
	_literal,
	identifier,
	literal_unit,
	literal_bool,
	literal_length,
	literal_int,
	literal_float,
	inline_cmd,
	inline_cmd_name,
	block_cmd,
	block_cmd_name,
	cmd_expr_arg,
	cmd_expr_option,
	cmd_text_arg,
	_cmd_expr_arg_inner,
	math_cmd,
	math_cmd_name,
	math_cmd_expr_arg,
	math_cmd_expr_option,
	_math_cmd_expr_arg_inner,
	inline_text,
	inline_text_list,
	inline_text_bullet_list,
	horizontal,
	_horizontal_compound,
	inline_text_bullet_item,
	inline_text_bullet_star,
	inline_literal_escaped,
	inline_text_embedding,
	block_text,
	vertical,
	block_text_embedding,
	math_text,
	math_list,
	math,
	math_token,
	_math_sup,
	_math_sub,
	_math_group,
	math_unary,
	math_embedding,
	other(String),
}
